{"version":3,"sources":["../static/js/4.7f5491b4.chunk.js","containers/login/Login.jsx","../node_modules/immutable/dist/immutable.js","components/alert/Alert.jsx","components/alert/style.scss","webpack:///./src/components/alert/style.scss?c852","containers/login/style.scss","webpack:///./src/containers/login/style.scss?b64b"],"names":["webpackJsonp","153","module","__webpack_exports__","__webpack_require__","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","setPrototypeOf","__proto__","_dec","_class","_class2","_temp","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1_immutable__","__WEBPACK_IMPORTED_MODULE_2_react_redux__","__WEBPACK_IMPORTED_MODULE_3_prop_types__","__WEBPACK_IMPORTED_MODULE_3_prop_types___default","__WEBPACK_IMPORTED_MODULE_4_store_action__","__WEBPACK_IMPORTED_MODULE_5__alert_Alert__","__WEBPACK_IMPORTED_MODULE_6__style_scss__","__WEBPACK_IMPORTED_MODULE_6__style_scss___default","_createClass","defineProperties","target","props","i","length","descriptor","protoProps","staticProps","Login","state","user","login","register","operateMessage","_Component","this","_this","getPrototypeOf","handleInputChange","e","name","setState","_this$state","username","password","_this$state2","closeAlert","textInput","a","createRef","current","focus","nextProps","nextState","_props","history","isLogin","push","_state","_props2","createElement","Fragment","show","msg","type","className","onClick","container","title","body","htmlFor","id","placeholder","autoComplete","onChange","ref","footer","propTypes","object","isRequired","func","210","exports","global","factory","createClass","ctor","Iterable","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","SetRef","OwnerID","arrCopy","arr","offset","len","Math","max","newArr","Array","ii","ensureSize","iter","undefined","size","__iterate","returnTrue","wrapIndex","index","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","next","iteratorValue","k","v","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","array","_array","ObjectSeq","keys","_object","_keys","IterableSeq","_iterable","IteratorSeq","iterator","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","isArray","maybeIndexedSeqFromValue","seqIterate","fn","reverse","useKeys","cache","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","parentJSON","map","isPlainObj","toList","toMap","is","valueA","valueB","valueOf","equals","deepEqual","b","__hash","notAssociative","entries","every","flipped","cacheResult","_","allEqual","bSize","has","get","NOT_SET","Repeat","times","_value","Infinity","EMPTY_REPEAT","invariant","condition","error","Error","Range","start","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","hash","o","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","toString","string","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","propertyIsEnumerable","getIENodeHash","objHashUID","set","isExtensible","apply","arguments","nodeType","node","uniqueID","documentElement","assertNotInfinite","Map","emptyMap","isMap","withMutations","forEach","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","count","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","prev","__prev","makeMap","root","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","update","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","filter","x","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","updater","isNotSet","existingValue","newValue","nextExisting","nextUpdated","remove","popCount","setIn","idx","val","canEdit","newArray","spliceIn","newLen","after","spliceOut","pop","List","empty","emptyList","isList","makeList","VNode","toArray","list","setSize","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","from","left","to","right","DONE","values","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","slice","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","newList","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","context","mappedSequence","c","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","concat","singleton","concatSeq","flatten","reduce","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","sort","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","s","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","recordName","names","setProp","bind","Set","emptySet","isSet","add","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","not","neg","quoteString","JSON","stringify","String","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","murmurHashOfSize","hashMerge","imul","SLICE$0","Keyed","Indexed","Symbol","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","hasOwnProperty","searchValue","indexOf","lastIndexOf","other","possibleIndex","floor","offsetValue","d","WeakMap","keyValues","updateIn","deleteIn","updatedValue","merge","mergeWith","mergeIn","m","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","splice","insert","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","peek","pushAll","toJS","__toJS","toJSON","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","join","returnValue","find","findEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","found","findKey","findLast","findLastEntry","findLastKey","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","keyOf","last","lastKeyOf","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","chain","contains","mapEntries","mapKeys","KeyedIterablePrototype","findIndex","removeNum","numArgs","spliced","findLastIndex","interpose","interleave","zipped","interleaved","zip","zipWith","278","_temp2","__WEBPACK_IMPORTED_MODULE_1_prop_types__","__WEBPACK_IMPORTED_MODULE_1_prop_types___default","__WEBPACK_IMPORTED_MODULE_2__style_scss__","__WEBPACK_IMPORTED_MODULE_2__style_scss___default","Alert","_PureComponent","_ref","_ret","_len","args","_key","toggle","children","theme","mask","alert","style","backgroundColor","close","bool","defaultProps","279","content","options","hmr","transform","locals","280","version","sources","mappings","file","sourcesContent","sourceRoot","296","297","login-btn","register-btn","alert-button","logined"],"mappings":"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","file":"static/js/4.7f5491b4.chunk.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 153:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_immutable__ = __webpack_require__(210);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_immutable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_immutable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react_redux__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_store_action__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__alert_Alert__ = __webpack_require__(278);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__style_scss__ = __webpack_require__(296);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__style_scss__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _dec,_class,_class2,_temp;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Login=(_dec=Object(__WEBPACK_IMPORTED_MODULE_2_react_redux__[\"b\" /* connect */])(function(state){return{user:state.user};},{login:__WEBPACK_IMPORTED_MODULE_4_store_action__[\"f\" /* login */],register:__WEBPACK_IMPORTED_MODULE_4_store_action__[\"h\" /* register */],operateMessage:__WEBPACK_IMPORTED_MODULE_4_store_action__[\"g\" /* operateMessage */]}),_dec(_class=(_temp=_class2=function(_Component){_inherits(Login,_Component);function Login(props){_classCallCheck(this,Login);var _this=_possibleConstructorReturn(this,(Login.__proto__||Object.getPrototypeOf(Login)).call(this,props));_this.handleInputChange=function(e){var name=e.target.name;var value=e.target.value;_this.setState(_defineProperty({},name,value));};_this.login=function(){var _this$state=_this.state,username=_this$state.username,password=_this$state.password;var login=_this.props.login;login(username,password);};_this.register=function(){var _this$state2=_this.state,username=_this$state2.username,password=_this$state2.password;var register=_this.props.register;register(username,password);};_this.closeAlert=function(){_this.props.operateMessage('');};_this.state={username:'',password:''};_this.textInput=__WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();return _this;}_createClass(Login,[{key:'componentDidMount',value:function componentDidMount(){this.textInput.current&&this.textInput.current.focus();}},{key:'shouldComponentUpdate',value:function shouldComponentUpdate(nextProps,nextState){return!Object(__WEBPACK_IMPORTED_MODULE_1_immutable__[\"is\"])(Object(__WEBPACK_IMPORTED_MODULE_1_immutable__[\"fromJS\"])(this.props),Object(__WEBPACK_IMPORTED_MODULE_1_immutable__[\"fromJS\"])(nextProps))||!Object(__WEBPACK_IMPORTED_MODULE_1_immutable__[\"is\"])(Object(__WEBPACK_IMPORTED_MODULE_1_immutable__[\"fromJS\"])(this.state),Object(__WEBPACK_IMPORTED_MODULE_1_immutable__[\"fromJS\"])(nextState));}},{key:'componentDidUpdate',value:function componentDidUpdate(){var _props=this.props,user=_props.user,history=_props.history;user.isLogin&&history.push('/');}},{key:'render',value:function render(){var _state=this.state,username=_state.username,password=_state.password;var _props2=this.props,user=_props2.user,history=_props2.history;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Fragment,null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__alert_Alert__[\"a\" /* default */],{show:!!user.msg,type:'error'},user.msg,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('button',{className:__WEBPACK_IMPORTED_MODULE_6__style_scss___default.a['alert-button'],onClick:this.closeAlert},'\\u5173\\u95ED')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('main',{className:__WEBPACK_IMPORTED_MODULE_6__style_scss___default.a.container},user.isLogin?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:__WEBPACK_IMPORTED_MODULE_6__style_scss___default.a['logined'],onClick:function onClick(){history.push('/');}},'\\u4F60\\u5DF2\\u7ECF\\u767B\\u5F55\\u3002\\u524D\\u5F80\\u4E3B\\u9875\\uFF1F'):__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:__WEBPACK_IMPORTED_MODULE_6__style_scss___default.a.title},'\\u4F60\\u597D\\u5440\\uFF0C\\u5F88\\u9AD8\\u5174\\u89C1\\u5230\\u4F60'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:__WEBPACK_IMPORTED_MODULE_6__style_scss___default.a.body},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('label',{htmlFor:'username'},'\\u7528\\u6237\\uFF1A'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input',{type:'text',name:'username',id:'username',placeholder:'\\u544A\\u8BC9\\u4F60\\u5427~~',autoComplete:'off',value:username,onChange:this.handleInputChange,ref:this.textInput})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('label',{htmlFor:'password'},'\\u5BC6\\u7801\\uFF1A'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('input',{type:'password',name:'password',id:'password',placeholder:'\\u4E0D\\u8BB8\\u5077\\u770B\\uFF01\\uFF01',value:password,onChange:this.handleInputChange})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('button',{className:__WEBPACK_IMPORTED_MODULE_6__style_scss___default.a['login-btn'],onClick:this.login},'\\u6211\\u8FDB\\u6765\\u54AF~')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:__WEBPACK_IMPORTED_MODULE_6__style_scss___default.a.footer},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('span',null,'\\u6211\\u4EEC\\u597D\\u50CF\\u662F\\u7B2C\\u4E00\\u6B21\\u89C1\\u9762\\u5427\\uFF1F'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('button',{className:__WEBPACK_IMPORTED_MODULE_6__style_scss___default.a['register-btn'],onClick:this.register},'\\u6B22\\u8FCE\\u4F60\\u52A0\\u5165')))));}}]);return Login;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]),_class2.propTypes={user:__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,login:__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired,register:__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired,operateMessage:__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func.isRequired},_temp))||_class);/* harmony default export */ __webpack_exports__[\"default\"] = (Login);\n\n/***/ }),\n\n/***/ 210:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n/***/ }),\n\n/***/ 278:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__style_scss__ = __webpack_require__(279);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__style_scss__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _class,_temp2;function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var Alert=(_temp2=_class=function(_PureComponent){_inherits(Alert,_PureComponent);function Alert(){var _ref;var _temp,_this,_ret;_classCallCheck(this,Alert);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=Alert.__proto__||Object.getPrototypeOf(Alert)).call.apply(_ref,[this].concat(args))),_this),_this.closeAlert=function(){_this.props.toggle();},_temp),_possibleConstructorReturn(_this,_ret);}_createClass(Alert,[{key:'render',value:function render(){var _props=this.props,children=_props.children,show=_props.show,type=_props.type,toggle=_props.toggle;var theme='';switch(type){case'success':theme='#27ae60';break;case'info':theme='#00a2d3';break;case'warn':theme='#f1c40f';break;case'error':theme='#e74c3c';break;default:theme='#27ae60';}var render=show?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:__WEBPACK_IMPORTED_MODULE_2__style_scss___default.a.mask},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:__WEBPACK_IMPORTED_MODULE_2__style_scss___default.a.alert,style:{backgroundColor:theme}},toggle?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('span',{className:__WEBPACK_IMPORTED_MODULE_2__style_scss___default.a.close,onClick:this.closeAlert},'\\xD7'):null,children)):null;return render;}}]);return Alert;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"PureComponent\"]),_class.propTypes={children:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node.isRequired,show:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool.isRequired,toggle:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,type:__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string},_class.defaultProps={toggle:null},_temp2);/* harmony default export */ __webpack_exports__[\"a\"] = (Alert);\n\n/***/ }),\n\n/***/ 279:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(280);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(47)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 280:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(46)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"._1ss4LcAU7pvxm8oSU1eb2M{position:fixed;top:0;width:100%;min-height:100vh;background:rgba(0,0,0,.7);z-index:15}._1ss4LcAU7pvxm8oSU1eb2M ._2WYOSOJMJhkn5v2YHeR99R{position:fixed;width:400px;height:150px;top:0;left:0;right:0;bottom:0;margin:100px auto;padding-top:30px;z-index:20;word-wrap:break-word;line-height:40px;font-size:20px;text-align:center;font-weight:700;color:#fff;border-radius:5px}._1ss4LcAU7pvxm8oSU1eb2M ._2WYOSOJMJhkn5v2YHeR99R ._3xpmhiQop8KXyTwUxHZbOH{position:absolute;top:0;right:20px;font-size:26px;cursor:pointer}\", \"\", {\"version\":3,\"sources\":[\"E:/文档/VS Code/react-blog/src/components/alert/style.scss\"],\"names\":[],\"mappings\":\"AAAA,yBACE,eAAgB,AAChB,MAAO,AACP,WAAY,AACZ,iBAAkB,AAClB,0BAA+B,AAC/B,UAAY,CAAE,AACd,kDACE,eAAgB,AAChB,YAAa,AACb,aAAc,AACd,MAAO,AACP,OAAQ,AACR,QAAS,AACT,SAAU,AACV,kBAAmB,AACnB,iBAAkB,AAClB,WAAY,AACZ,qBAAsB,AACtB,iBAAkB,AAClB,eAAgB,AAChB,kBAAmB,AACnB,gBAAkB,AAClB,WAAY,AACZ,iBAAmB,CAAE,AACrB,2EACE,kBAAmB,AACnB,MAAS,AACT,WAAY,AACZ,eAAgB,AAChB,cAAgB,CAAE\",\"file\":\"style.scss\",\"sourcesContent\":[\".mask {\\n  position: fixed;\\n  top: 0;\\n  width: 100%;\\n  min-height: 100vh;\\n  background: rgba(0, 0, 0, 0.7);\\n  z-index: 15; }\\n  .mask .alert {\\n    position: fixed;\\n    width: 400px;\\n    height: 150px;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    margin: 100px auto;\\n    padding-top: 30px;\\n    z-index: 20;\\n    word-wrap: break-word;\\n    line-height: 40px;\\n    font-size: 20px;\\n    text-align: center;\\n    font-weight: bold;\\n    color: #fff;\\n    border-radius: 5px; }\\n    .mask .alert .close {\\n      position: absolute;\\n      top: 0px;\\n      right: 20px;\\n      font-size: 26px;\\n      cursor: pointer; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\nexports.locals = {\n\t\"mask\": \"_1ss4LcAU7pvxm8oSU1eb2M\",\n\t\"alert\": \"_2WYOSOJMJhkn5v2YHeR99R\",\n\t\"close\": \"_3xpmhiQop8KXyTwUxHZbOH\"\n};\n\n/***/ }),\n\n/***/ 296:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(297);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(47)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n/***/ }),\n\n/***/ 297:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(46)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"._2Mmp2nsCFarJLxz846oLQb{width:40%;height:420px;position:absolute;margin:auto;top:0;right:0;bottom:0;left:0;background:hsla(0,0%,93%,.8);-webkit-box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2);box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2);border-radius:5px;min-width:500px}._2Mmp2nsCFarJLxz846oLQb .j4vR9-f4KZrAEAUEwhoAW{margin-top:20px;line-height:80px;font-size:22px;font-weight:bolder;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT{width:100%;height:260px;-webkit-box-sizing:border-box;box-sizing:border-box;padding:10px 30px 0;text-align:center}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT div{position:relative;left:-24px;margin:20px 0;text-align:center;font-weight:700}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT div input{margin:0;border:1px solid #ccc;padding:7px 0;border-radius:3px;padding-left:5px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;-o-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;width:260px}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT div input:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT ._3P2nNCABrnQDX9mgOPRLwd{display:inline-block;height:32px;margin:0;padding:0 20px;text-decoration:none;text-align:center;line-height:32px;border-radius:4px;cursor:pointer;outline:none;border:none;background-color:#4f46b4;border-color:#4f46b4;color:#fff;width:260px}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT ._3P2nNCABrnQDX9mgOPRLwd:hover{opacity:.85}._2Mmp2nsCFarJLxz846oLQb ._2dNilmCszIfa127F6-qgKg{text-align:right;padding-right:30px}._2Mmp2nsCFarJLxz846oLQb ._2dNilmCszIfa127F6-qgKg span{margin-right:10px;color:#353535;line-height:32px;font-size:18px;font-weight:700}._2Mmp2nsCFarJLxz846oLQb ._2dNilmCszIfa127F6-qgKg ._3rO2Lug6XEINShyjacHGxs{display:inline-block;height:32px;margin:0;padding:0 20px;text-decoration:none;text-align:center;line-height:32px;border-radius:4px;cursor:pointer;outline:none;border:none;background-color:#851b8f;border-color:#851b8f;color:#fff}._2Mmp2nsCFarJLxz846oLQb ._2dNilmCszIfa127F6-qgKg ._3rO2Lug6XEINShyjacHGxs:hover{opacity:.85}._2l9-tRK7wcMLERaZbQWyJM{position:absolute;bottom:16px;right:16px;display:inline-block;height:32px;margin:0;padding:0 20px;text-decoration:none;text-align:center;line-height:32px;border-radius:4px;cursor:pointer;outline:none;border:none;background-color:#aaa;border-color:#aaa;color:#fff}._2l9-tRK7wcMLERaZbQWyJM:hover{opacity:.85}._38BNdK8Fav21ZbVyomIj_{position:absolute;width:100%;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);line-height:40px;text-align:center;color:#353535;font-size:30px;font-weight:700;cursor:pointer}\", \"\", {\"version\":3,\"sources\":[\"E:/文档/VS Code/react-blog/src/containers/login/style.scss\"],\"names\":[],\"mappings\":\"AAAA,yBACE,UAAW,AACX,aAAc,AACd,kBAAmB,AACnB,YAAa,AACb,MAAO,AACP,QAAS,AACT,SAAU,AACV,OAAQ,AACR,6BAAqC,AACrC,0GAAyH,AACjH,kGAAiH,AACzH,kBAAmB,AACnB,eAAiB,CAAE,AACnB,gDACE,gBAAiB,AACjB,iBAAkB,AAClB,eAAgB,AAChB,mBAAoB,AACpB,kBAAmB,AACnB,yBAA0B,AACvB,sBAAuB,AACtB,qBAAsB,AAClB,gBAAkB,CAAE,AAC9B,kDACE,WAAY,AACZ,aAAc,AACd,8BAA+B,AACvB,sBAAuB,AAC/B,oBAAqB,AACrB,iBAAmB,CAAE,AACrB,sDACE,kBAAmB,AACnB,WAAY,AACZ,cAAe,AACf,kBAAmB,AACnB,eAAkB,CAAE,AACpB,4DACE,SAAU,AACV,sBAAuB,AACvB,cAAiB,AACjB,kBAAmB,AACnB,iBAAkB,AAClB,oDAAyD,AACjD,4CAAiD,AACzD,qFAAyF,AACzF,6EAAiF,AACjF,wEAA4E,AAC5E,qEAAyE,AACzE,yGAA+G,AAC/G,WAAa,CAAE,AACf,kEACE,qBAAsB,AACtB,UAAW,AACX,iFAA2F,AACnF,wEAAmF,CAAE,AACnG,2EACE,qBAAsB,AACtB,YAAa,AACb,SAAU,AACV,eAAgB,AAChB,qBAAsB,AACtB,kBAAmB,AACnB,iBAAkB,AAClB,kBAAmB,AACnB,eAAgB,AAChB,aAAc,AACd,YAAa,AACb,yBAA0B,AAC1B,qBAAsB,AACtB,WAAY,AACZ,WAAa,CAAE,AACf,iFACE,WAAc,CAAE,AACtB,kDACE,iBAAkB,AAClB,kBAAoB,CAAE,AACtB,uDACE,kBAAmB,AACnB,cAAe,AACf,iBAAkB,AAClB,eAAgB,AAChB,eAAkB,CAAE,AACtB,2EACE,qBAAsB,AACtB,YAAa,AACb,SAAU,AACV,eAAgB,AAChB,qBAAsB,AACtB,kBAAmB,AACnB,iBAAkB,AAClB,kBAAmB,AACnB,eAAgB,AAChB,aAAc,AACd,YAAa,AACb,yBAA0B,AAC1B,qBAAsB,AACtB,UAAY,CAAE,AACd,iFACE,WAAc,CAAE,AAExB,yBACE,kBAAmB,AACnB,YAAa,AACb,WAAY,AACZ,qBAAsB,AACtB,YAAa,AACb,SAAU,AACV,eAAgB,AAChB,qBAAsB,AACtB,kBAAmB,AACnB,iBAAkB,AAClB,kBAAmB,AACnB,eAAgB,AAChB,aAAc,AACd,YAAa,AACb,sBAAuB,AACvB,kBAAmB,AACnB,UAAY,CAAE,AACd,+BACE,WAAc,CAAE,AAEpB,wBACE,kBAAmB,AACnB,WAAY,AACZ,QAAS,AACT,mCAAoC,AAChC,+BAAgC,AAC5B,2BAA4B,AACpC,iBAAkB,AAClB,kBAAmB,AACnB,cAAe,AACf,eAAgB,AAChB,gBAAkB,AAClB,cAAgB,CAAE\",\"file\":\"style.scss\",\"sourcesContent\":[\".container {\\n  width: 40%;\\n  height: 420px;\\n  position: absolute;\\n  margin: auto;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background: rgba(236, 236, 236, 0.8);\\n  -webkit-box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.2);\\n          box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.2);\\n  border-radius: 5px;\\n  min-width: 500px; }\\n  .container .title {\\n    margin-top: 20px;\\n    line-height: 80px;\\n    font-size: 22px;\\n    font-weight: bolder;\\n    text-align: center;\\n    -webkit-user-select: none;\\n       -moz-user-select: none;\\n        -ms-user-select: none;\\n            user-select: none; }\\n  .container .body {\\n    width: 100%;\\n    height: 260px;\\n    -webkit-box-sizing: border-box;\\n            box-sizing: border-box;\\n    padding: 10px 30px 0;\\n    text-align: center; }\\n    .container .body div {\\n      position: relative;\\n      left: -24px;\\n      margin: 20px 0;\\n      text-align: center;\\n      font-weight: bold; }\\n      .container .body div input {\\n        margin: 0;\\n        border: 1px solid #ccc;\\n        padding: 7px 0px;\\n        border-radius: 3px;\\n        padding-left: 5px;\\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\\n                box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\\n        -webkit-transition: border-color ease-in-out 0.15s, -webkit-box-shadow ease-in-out 0.15s;\\n        transition: border-color ease-in-out 0.15s, -webkit-box-shadow ease-in-out 0.15s;\\n        -o-transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\\n        transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\\n        transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s, -webkit-box-shadow ease-in-out 0.15s;\\n        width: 260px; }\\n        .container .body div input:focus {\\n          border-color: #66afe9;\\n          outline: 0;\\n          -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\\n                  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6); }\\n    .container .body .login-btn {\\n      display: inline-block;\\n      height: 32px;\\n      margin: 0;\\n      padding: 0 20px;\\n      text-decoration: none;\\n      text-align: center;\\n      line-height: 32px;\\n      border-radius: 4px;\\n      cursor: pointer;\\n      outline: none;\\n      border: none;\\n      background-color: #4f46b4;\\n      border-color: #4f46b4;\\n      color: #fff;\\n      width: 260px; }\\n      .container .body .login-btn:hover {\\n        opacity: 0.85; }\\n  .container .footer {\\n    text-align: right;\\n    padding-right: 30px; }\\n    .container .footer span {\\n      margin-right: 10px;\\n      color: #353535;\\n      line-height: 32px;\\n      font-size: 18px;\\n      font-weight: bold; }\\n    .container .footer .register-btn {\\n      display: inline-block;\\n      height: 32px;\\n      margin: 0;\\n      padding: 0 20px;\\n      text-decoration: none;\\n      text-align: center;\\n      line-height: 32px;\\n      border-radius: 4px;\\n      cursor: pointer;\\n      outline: none;\\n      border: none;\\n      background-color: #851b8f;\\n      border-color: #851b8f;\\n      color: #fff; }\\n      .container .footer .register-btn:hover {\\n        opacity: 0.85; }\\n\\n.alert-button {\\n  position: absolute;\\n  bottom: 16px;\\n  right: 16px;\\n  display: inline-block;\\n  height: 32px;\\n  margin: 0;\\n  padding: 0 20px;\\n  text-decoration: none;\\n  text-align: center;\\n  line-height: 32px;\\n  border-radius: 4px;\\n  cursor: pointer;\\n  outline: none;\\n  border: none;\\n  background-color: #aaa;\\n  border-color: #aaa;\\n  color: #fff; }\\n  .alert-button:hover {\\n    opacity: 0.85; }\\n\\n.logined {\\n  position: absolute;\\n  width: 100%;\\n  top: 50%;\\n  -webkit-transform: translateY(-50%);\\n      -ms-transform: translateY(-50%);\\n          transform: translateY(-50%);\\n  line-height: 40px;\\n  text-align: center;\\n  color: #353535;\\n  font-size: 30px;\\n  font-weight: bold;\\n  cursor: pointer; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\nexports.locals = {\n\t\"container\": \"_2Mmp2nsCFarJLxz846oLQb\",\n\t\"title\": \"j4vR9-f4KZrAEAUEwhoAW\",\n\t\"body\": \"_2js9Jr81Bz2E49O0r2XdHT\",\n\t\"login-btn\": \"_3P2nNCABrnQDX9mgOPRLwd\",\n\t\"footer\": \"_2dNilmCszIfa127F6-qgKg\",\n\t\"register-btn\": \"_3rO2Lug6XEINShyjacHGxs\",\n\t\"alert-button\": \"_2l9-tRK7wcMLERaZbQWyJM\",\n\t\"logined\": \"_38BNdK8Fav21ZbVyomIj_\"\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/4.7f5491b4.chunk.js","import React, { Component } from 'react'\nimport { is, fromJS } from 'immutable'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { login, register, operateMessage } from 'store/action'\nimport Alert from '@/alert/Alert'\nimport style from './style.scss'\n\n@connect(state => ({ user: state.user }), { login, register, operateMessage })\nclass Login extends Component {\n  static propTypes = {\n    user: PropTypes.object.isRequired,\n    login: PropTypes.func.isRequired,\n    register: PropTypes.func.isRequired,\n    operateMessage: PropTypes.func.isRequired\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      username: '',\n      password: ''\n    }\n    this.textInput = React.createRef()\n  }\n\n  componentDidMount() {\n    this.textInput.current && this.textInput.current.focus()\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return !is(fromJS(this.props), fromJS(nextProps)) || !is(fromJS(this.state), fromJS(nextState))\n  }\n\n  componentDidUpdate() {\n    const { user, history } = this.props\n    user.isLogin && history.push('/')\n  }\n\n  handleInputChange = e => {\n    const name = e.target.name\n    const value = e.target.value\n    this.setState({\n      [name]: value\n    })\n  }\n\n  login = () => {\n    const { username, password } = this.state\n    const { login } = this.props\n    login(username, password)\n  }\n\n  register = () => {\n    const { username, password } = this.state\n    const { register } = this.props\n    register(username, password)\n  }\n\n  closeAlert = () => {\n    this.props.operateMessage('')\n  }\n\n  render() {\n    const { username, password } = this.state\n    const { user, history } = this.props\n\n    return (\n      <React.Fragment>\n        <Alert show={!!user.msg} type=\"error\">\n          {user.msg}\n          <button className={style['alert-button']} onClick={this.closeAlert}>\n            关闭\n          </button>\n        </Alert>\n        <main className={style.container}>\n          {user.isLogin ? (\n            <div\n              className={style['logined']}\n              onClick={() => {\n                history.push('/')\n              }}\n            >\n              你已经登录。前往主页？\n            </div>\n          ) : (\n            <div>\n              <div className={style.title}>你好呀，很高兴见到你</div>\n              <div className={style.body}>\n                <div>\n                  <label htmlFor=\"username\">用户：</label>\n                  <input\n                    type=\"text\"\n                    name=\"username\"\n                    id=\"username\"\n                    placeholder=\"告诉你吧~~\"\n                    autoComplete=\"off\"\n                    value={username}\n                    onChange={this.handleInputChange}\n                    ref={this.textInput}\n                  />\n                </div>\n                <div>\n                  <label htmlFor=\"password\">密码：</label>\n                  <input\n                    type=\"password\"\n                    name=\"password\"\n                    id=\"password\"\n                    placeholder=\"不许偷看！！\"\n                    value={password}\n                    onChange={this.handleInputChange}\n                  />\n                </div>\n                <button className={style['login-btn']} onClick={this.login}>\n                  我进来咯~\n                </button>\n              </div>\n              <div className={style.footer}>\n                <span>我们好像是第一次见面吧？</span>\n                <button className={style['register-btn']} onClick={this.register}>\n                  欢迎你加入\n                </button>\n              </div>\n            </div>\n          )}\n        </main>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Login\n\n\n\n// WEBPACK FOOTER //\n// ./src/containers/login/Login.jsx","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/immutable/dist/immutable.js\n// module id = 210\n// module chunks = 0 1 2 3 4","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport style from './style.scss'\n\nclass Alert extends PureComponent {\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    show: PropTypes.bool.isRequired,\n    toggle: PropTypes.func,\n    type: PropTypes.string\n  }\n\n  static defaultProps = {\n    toggle: null\n  }\n\n  closeAlert = () => {\n    this.props.toggle()\n  }\n\n  render() {\n    const { children, show, type, toggle } = this.props\n\n    let theme = ''\n    switch (type) {\n      case 'success':\n        theme = '#27ae60'\n        break\n      case 'info':\n        theme = '#00a2d3'\n        break\n      case 'warn':\n        theme = '#f1c40f'\n        break\n      case 'error':\n        theme = '#e74c3c'\n        break\n      default:\n        theme = '#27ae60'\n    }\n\n    const render = show ? (\n      <div className={style.mask}>\n        <div className={style.alert} style={{ backgroundColor: theme }}>\n          {toggle ? (\n            <span className={style.close} onClick={this.closeAlert}>\n              &times;\n            </span>\n          ) : null}\n          {children}\n        </div>\n      </div>\n    ) : null\n\n    return render\n  }\n}\n\nexport default Alert\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/alert/Alert.jsx","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/alert/style.scss\n// module id = 279\n// module chunks = 1 3 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"._1ss4LcAU7pvxm8oSU1eb2M{position:fixed;top:0;width:100%;min-height:100vh;background:rgba(0,0,0,.7);z-index:15}._1ss4LcAU7pvxm8oSU1eb2M ._2WYOSOJMJhkn5v2YHeR99R{position:fixed;width:400px;height:150px;top:0;left:0;right:0;bottom:0;margin:100px auto;padding-top:30px;z-index:20;word-wrap:break-word;line-height:40px;font-size:20px;text-align:center;font-weight:700;color:#fff;border-radius:5px}._1ss4LcAU7pvxm8oSU1eb2M ._2WYOSOJMJhkn5v2YHeR99R ._3xpmhiQop8KXyTwUxHZbOH{position:absolute;top:0;right:20px;font-size:26px;cursor:pointer}\", \"\", {\"version\":3,\"sources\":[\"E:/文档/VS Code/react-blog/src/components/alert/style.scss\"],\"names\":[],\"mappings\":\"AAAA,yBACE,eAAgB,AAChB,MAAO,AACP,WAAY,AACZ,iBAAkB,AAClB,0BAA+B,AAC/B,UAAY,CAAE,AACd,kDACE,eAAgB,AAChB,YAAa,AACb,aAAc,AACd,MAAO,AACP,OAAQ,AACR,QAAS,AACT,SAAU,AACV,kBAAmB,AACnB,iBAAkB,AAClB,WAAY,AACZ,qBAAsB,AACtB,iBAAkB,AAClB,eAAgB,AAChB,kBAAmB,AACnB,gBAAkB,AAClB,WAAY,AACZ,iBAAmB,CAAE,AACrB,2EACE,kBAAmB,AACnB,MAAS,AACT,WAAY,AACZ,eAAgB,AAChB,cAAgB,CAAE\",\"file\":\"style.scss\",\"sourcesContent\":[\".mask {\\n  position: fixed;\\n  top: 0;\\n  width: 100%;\\n  min-height: 100vh;\\n  background: rgba(0, 0, 0, 0.7);\\n  z-index: 15; }\\n  .mask .alert {\\n    position: fixed;\\n    width: 400px;\\n    height: 150px;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    margin: 100px auto;\\n    padding-top: 30px;\\n    z-index: 20;\\n    word-wrap: break-word;\\n    line-height: 40px;\\n    font-size: 20px;\\n    text-align: center;\\n    font-weight: bold;\\n    color: #fff;\\n    border-radius: 5px; }\\n    .mask .alert .close {\\n      position: absolute;\\n      top: 0px;\\n      right: 20px;\\n      font-size: 26px;\\n      cursor: pointer; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\nexports.locals = {\n\t\"mask\": \"_1ss4LcAU7pvxm8oSU1eb2M\",\n\t\"alert\": \"_2WYOSOJMJhkn5v2YHeR99R\",\n\t\"close\": \"_3xpmhiQop8KXyTwUxHZbOH\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"importLoaders\":1,\"minimize\":true,\"sourceMap\":true,\"modules\":true}!./node_modules/postcss-loader/lib?{\"ident\":\"postcss\"}!./node_modules/sass-loader/lib/loader.js!./src/components/alert/style.scss\n// module id = 280\n// module chunks = 1 3 4","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js??ref--1-oneOf-3-1!../../../node_modules/postcss-loader/lib/index.js??postcss!../../../node_modules/sass-loader/lib/loader.js!./style.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/containers/login/style.scss\n// module id = 296\n// module chunks = 4","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"._2Mmp2nsCFarJLxz846oLQb{width:40%;height:420px;position:absolute;margin:auto;top:0;right:0;bottom:0;left:0;background:hsla(0,0%,93%,.8);-webkit-box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2);box-shadow:0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12),0 2px 4px -1px rgba(0,0,0,.2);border-radius:5px;min-width:500px}._2Mmp2nsCFarJLxz846oLQb .j4vR9-f4KZrAEAUEwhoAW{margin-top:20px;line-height:80px;font-size:22px;font-weight:bolder;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT{width:100%;height:260px;-webkit-box-sizing:border-box;box-sizing:border-box;padding:10px 30px 0;text-align:center}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT div{position:relative;left:-24px;margin:20px 0;text-align:center;font-weight:700}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT div input{margin:0;border:1px solid #ccc;padding:7px 0;border-radius:3px;padding-left:5px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075);box-shadow:inset 0 1px 1px rgba(0,0,0,.075);-webkit-transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;-o-transition:border-color ease-in-out .15s,box-shadow ease-in-out .15s;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;width:260px}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT div input:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075),0 0 8px rgba(102,175,233,.6)}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT ._3P2nNCABrnQDX9mgOPRLwd{display:inline-block;height:32px;margin:0;padding:0 20px;text-decoration:none;text-align:center;line-height:32px;border-radius:4px;cursor:pointer;outline:none;border:none;background-color:#4f46b4;border-color:#4f46b4;color:#fff;width:260px}._2Mmp2nsCFarJLxz846oLQb ._2js9Jr81Bz2E49O0r2XdHT ._3P2nNCABrnQDX9mgOPRLwd:hover{opacity:.85}._2Mmp2nsCFarJLxz846oLQb ._2dNilmCszIfa127F6-qgKg{text-align:right;padding-right:30px}._2Mmp2nsCFarJLxz846oLQb ._2dNilmCszIfa127F6-qgKg span{margin-right:10px;color:#353535;line-height:32px;font-size:18px;font-weight:700}._2Mmp2nsCFarJLxz846oLQb ._2dNilmCszIfa127F6-qgKg ._3rO2Lug6XEINShyjacHGxs{display:inline-block;height:32px;margin:0;padding:0 20px;text-decoration:none;text-align:center;line-height:32px;border-radius:4px;cursor:pointer;outline:none;border:none;background-color:#851b8f;border-color:#851b8f;color:#fff}._2Mmp2nsCFarJLxz846oLQb ._2dNilmCszIfa127F6-qgKg ._3rO2Lug6XEINShyjacHGxs:hover{opacity:.85}._2l9-tRK7wcMLERaZbQWyJM{position:absolute;bottom:16px;right:16px;display:inline-block;height:32px;margin:0;padding:0 20px;text-decoration:none;text-align:center;line-height:32px;border-radius:4px;cursor:pointer;outline:none;border:none;background-color:#aaa;border-color:#aaa;color:#fff}._2l9-tRK7wcMLERaZbQWyJM:hover{opacity:.85}._38BNdK8Fav21ZbVyomIj_{position:absolute;width:100%;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);line-height:40px;text-align:center;color:#353535;font-size:30px;font-weight:700;cursor:pointer}\", \"\", {\"version\":3,\"sources\":[\"E:/文档/VS Code/react-blog/src/containers/login/style.scss\"],\"names\":[],\"mappings\":\"AAAA,yBACE,UAAW,AACX,aAAc,AACd,kBAAmB,AACnB,YAAa,AACb,MAAO,AACP,QAAS,AACT,SAAU,AACV,OAAQ,AACR,6BAAqC,AACrC,0GAAyH,AACjH,kGAAiH,AACzH,kBAAmB,AACnB,eAAiB,CAAE,AACnB,gDACE,gBAAiB,AACjB,iBAAkB,AAClB,eAAgB,AAChB,mBAAoB,AACpB,kBAAmB,AACnB,yBAA0B,AACvB,sBAAuB,AACtB,qBAAsB,AAClB,gBAAkB,CAAE,AAC9B,kDACE,WAAY,AACZ,aAAc,AACd,8BAA+B,AACvB,sBAAuB,AAC/B,oBAAqB,AACrB,iBAAmB,CAAE,AACrB,sDACE,kBAAmB,AACnB,WAAY,AACZ,cAAe,AACf,kBAAmB,AACnB,eAAkB,CAAE,AACpB,4DACE,SAAU,AACV,sBAAuB,AACvB,cAAiB,AACjB,kBAAmB,AACnB,iBAAkB,AAClB,oDAAyD,AACjD,4CAAiD,AACzD,qFAAyF,AACzF,6EAAiF,AACjF,wEAA4E,AAC5E,qEAAyE,AACzE,yGAA+G,AAC/G,WAAa,CAAE,AACf,kEACE,qBAAsB,AACtB,UAAW,AACX,iFAA2F,AACnF,wEAAmF,CAAE,AACnG,2EACE,qBAAsB,AACtB,YAAa,AACb,SAAU,AACV,eAAgB,AAChB,qBAAsB,AACtB,kBAAmB,AACnB,iBAAkB,AAClB,kBAAmB,AACnB,eAAgB,AAChB,aAAc,AACd,YAAa,AACb,yBAA0B,AAC1B,qBAAsB,AACtB,WAAY,AACZ,WAAa,CAAE,AACf,iFACE,WAAc,CAAE,AACtB,kDACE,iBAAkB,AAClB,kBAAoB,CAAE,AACtB,uDACE,kBAAmB,AACnB,cAAe,AACf,iBAAkB,AAClB,eAAgB,AAChB,eAAkB,CAAE,AACtB,2EACE,qBAAsB,AACtB,YAAa,AACb,SAAU,AACV,eAAgB,AAChB,qBAAsB,AACtB,kBAAmB,AACnB,iBAAkB,AAClB,kBAAmB,AACnB,eAAgB,AAChB,aAAc,AACd,YAAa,AACb,yBAA0B,AAC1B,qBAAsB,AACtB,UAAY,CAAE,AACd,iFACE,WAAc,CAAE,AAExB,yBACE,kBAAmB,AACnB,YAAa,AACb,WAAY,AACZ,qBAAsB,AACtB,YAAa,AACb,SAAU,AACV,eAAgB,AAChB,qBAAsB,AACtB,kBAAmB,AACnB,iBAAkB,AAClB,kBAAmB,AACnB,eAAgB,AAChB,aAAc,AACd,YAAa,AACb,sBAAuB,AACvB,kBAAmB,AACnB,UAAY,CAAE,AACd,+BACE,WAAc,CAAE,AAEpB,wBACE,kBAAmB,AACnB,WAAY,AACZ,QAAS,AACT,mCAAoC,AAChC,+BAAgC,AAC5B,2BAA4B,AACpC,iBAAkB,AAClB,kBAAmB,AACnB,cAAe,AACf,eAAgB,AAChB,gBAAkB,AAClB,cAAgB,CAAE\",\"file\":\"style.scss\",\"sourcesContent\":[\".container {\\n  width: 40%;\\n  height: 420px;\\n  position: absolute;\\n  margin: auto;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background: rgba(236, 236, 236, 0.8);\\n  -webkit-box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.2);\\n          box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.2);\\n  border-radius: 5px;\\n  min-width: 500px; }\\n  .container .title {\\n    margin-top: 20px;\\n    line-height: 80px;\\n    font-size: 22px;\\n    font-weight: bolder;\\n    text-align: center;\\n    -webkit-user-select: none;\\n       -moz-user-select: none;\\n        -ms-user-select: none;\\n            user-select: none; }\\n  .container .body {\\n    width: 100%;\\n    height: 260px;\\n    -webkit-box-sizing: border-box;\\n            box-sizing: border-box;\\n    padding: 10px 30px 0;\\n    text-align: center; }\\n    .container .body div {\\n      position: relative;\\n      left: -24px;\\n      margin: 20px 0;\\n      text-align: center;\\n      font-weight: bold; }\\n      .container .body div input {\\n        margin: 0;\\n        border: 1px solid #ccc;\\n        padding: 7px 0px;\\n        border-radius: 3px;\\n        padding-left: 5px;\\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\\n                box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\\n        -webkit-transition: border-color ease-in-out 0.15s, -webkit-box-shadow ease-in-out 0.15s;\\n        transition: border-color ease-in-out 0.15s, -webkit-box-shadow ease-in-out 0.15s;\\n        -o-transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\\n        transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s;\\n        transition: border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s, -webkit-box-shadow ease-in-out 0.15s;\\n        width: 260px; }\\n        .container .body div input:focus {\\n          border-color: #66afe9;\\n          outline: 0;\\n          -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);\\n                  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6); }\\n    .container .body .login-btn {\\n      display: inline-block;\\n      height: 32px;\\n      margin: 0;\\n      padding: 0 20px;\\n      text-decoration: none;\\n      text-align: center;\\n      line-height: 32px;\\n      border-radius: 4px;\\n      cursor: pointer;\\n      outline: none;\\n      border: none;\\n      background-color: #4f46b4;\\n      border-color: #4f46b4;\\n      color: #fff;\\n      width: 260px; }\\n      .container .body .login-btn:hover {\\n        opacity: 0.85; }\\n  .container .footer {\\n    text-align: right;\\n    padding-right: 30px; }\\n    .container .footer span {\\n      margin-right: 10px;\\n      color: #353535;\\n      line-height: 32px;\\n      font-size: 18px;\\n      font-weight: bold; }\\n    .container .footer .register-btn {\\n      display: inline-block;\\n      height: 32px;\\n      margin: 0;\\n      padding: 0 20px;\\n      text-decoration: none;\\n      text-align: center;\\n      line-height: 32px;\\n      border-radius: 4px;\\n      cursor: pointer;\\n      outline: none;\\n      border: none;\\n      background-color: #851b8f;\\n      border-color: #851b8f;\\n      color: #fff; }\\n      .container .footer .register-btn:hover {\\n        opacity: 0.85; }\\n\\n.alert-button {\\n  position: absolute;\\n  bottom: 16px;\\n  right: 16px;\\n  display: inline-block;\\n  height: 32px;\\n  margin: 0;\\n  padding: 0 20px;\\n  text-decoration: none;\\n  text-align: center;\\n  line-height: 32px;\\n  border-radius: 4px;\\n  cursor: pointer;\\n  outline: none;\\n  border: none;\\n  background-color: #aaa;\\n  border-color: #aaa;\\n  color: #fff; }\\n  .alert-button:hover {\\n    opacity: 0.85; }\\n\\n.logined {\\n  position: absolute;\\n  width: 100%;\\n  top: 50%;\\n  -webkit-transform: translateY(-50%);\\n      -ms-transform: translateY(-50%);\\n          transform: translateY(-50%);\\n  line-height: 40px;\\n  text-align: center;\\n  color: #353535;\\n  font-size: 30px;\\n  font-weight: bold;\\n  cursor: pointer; }\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\nexports.locals = {\n\t\"container\": \"_2Mmp2nsCFarJLxz846oLQb\",\n\t\"title\": \"j4vR9-f4KZrAEAUEwhoAW\",\n\t\"body\": \"_2js9Jr81Bz2E49O0r2XdHT\",\n\t\"login-btn\": \"_3P2nNCABrnQDX9mgOPRLwd\",\n\t\"footer\": \"_2dNilmCszIfa127F6-qgKg\",\n\t\"register-btn\": \"_3rO2Lug6XEINShyjacHGxs\",\n\t\"alert-button\": \"_2l9-tRK7wcMLERaZbQWyJM\",\n\t\"logined\": \"_38BNdK8Fav21ZbVyomIj_\"\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader?{\"importLoaders\":1,\"minimize\":true,\"sourceMap\":true,\"modules\":true}!./node_modules/postcss-loader/lib?{\"ident\":\"postcss\"}!./node_modules/sass-loader/lib/loader.js!./src/containers/login/style.scss\n// module id = 297\n// module chunks = 4"],"sourceRoot":""}